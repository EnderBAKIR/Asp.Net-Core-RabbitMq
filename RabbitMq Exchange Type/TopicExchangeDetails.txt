------------Publisher-----------------
using RabbitMQ.Client;
using System.Text;

namespace RabbitMQ.Publisher
{
    class Program
    {
        public enum LogNames
        {
            Critical = 1,
            Error = 2,
            Warning = 3,
            Info = 4,

        }


        static void Main(string[] args)
        {
            //if we have a cloud rabbitmq we must use this method in Connection 
            //var factory = new ConnectionFactory() {factory.uri = new Uri("Cloud Link")}

            var factory = new ConnectionFactory()//Connect RabbitMQ with Docker Container.
            {
                HostName = "localhost",
                Port = 5672,
                UserName = "guest",
                Password = "guest"
            };

            using var connection = factory.CreateConnection();

            var channel = connection.CreateModel();

            channel.ExchangeDeclare("logs-topic", durable: true, type: ExchangeType.Topic);

            Random rnd = new Random();
            Enumerable.Range(1, 50).ToList().ForEach(x =>
            {
                
                LogNames log1 = (LogNames)rnd.Next(1, 5);
                LogNames log2 = (LogNames)rnd.Next(1, 5);
                LogNames log3 = (LogNames)rnd.Next(1, 5);

                var routeKey = $"{log1}.{log2}.{log3}";

                string message = $"Log-type:{log1}-{log2}-{log3}";
                var messagebody = Encoding.UTF8.GetBytes(message);
                channel.BasicPublish("logs-topic", routeKey, null, messagebody);

                Console.WriteLine($"log Gönderilmiþtir  : {message}");
            });


            Console.ReadLine();
        }
    }
}
------------Publisher-----------------


------------Subscriber-----------------

using RabbitMQ.Client;
using RabbitMQ.Client.Events;

using System.Text;

namespace RabbitMQ.Subscriber
{
    class Program
    {
        static void Main(string[] args)
        {
            //if we have a cloud rabbitmq we must use this method in Connection 
            //var factory = new ConnectionFactory() {factory.uri = new Uri("Cloud Link")}

            var factory = new ConnectionFactory()//Connect RabbitMQ with Docker Container.
            {
                HostName = "localhost",
                Port = 5672,
                UserName = "guest",
                Password = "guest"
            };

            using var connection = factory.CreateConnection();

            var channel = connection.CreateModel();
            
            channel.BasicQos(0, 1, false);//=> this "false" , answer to whether or not the specified number of messages should be sent to subscribers by dividing them. 

            /* channel.QueueDeclare("hello-queue", true, false, false);*///if u have same queue in publisher this method unncessary but harmless , and u must use same options for queue.

            var consumer = new EventingBasicConsumer(channel);
            var queueName = channel.QueueDeclare().QueueName;
            var routeKey = "Info.#";
            channel.QueueBind(queueName,"logs-topic", routeKey);

            channel.BasicConsume(queueName, false, consumer);

            Console.WriteLine("listening...");

            consumer.Received += (object? sender, BasicDeliverEventArgs e) =>
            {
                var message = Encoding.UTF8.GetString(e.Body.ToArray());

                Thread.Sleep(1500);
                Console.WriteLine("Uyarý:  " + message);
                //File.AppendAllText("log-critical.txt", message + "\n");
                channel.BasicAck(e.DeliveryTag, false);
            };




            Console.ReadLine();
        }


    }
}

------------Subscriber-----------------