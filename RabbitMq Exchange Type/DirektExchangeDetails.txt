			Direct    Route-Level
Publisher =>Exchange  ===========>	Queue
									
											=======>Subsciber
					  Route-Level
					  ===========>	Queue	

											=======>Subsciber

					  Route-Level
					  ===========>	Queue


					  ------Publisher-----
using RabbitMQ.Client;
using System.Text;

namespace RabbitMQ.Publisher
{
    class Program
    {
        public enum LogNames
        {
            Critical=1,
            Error=2,
            Warning=3,
            Info=4,

        }


        static void Main(string[] args)
        {
            //if we have a cloud rabbitmq we must use this method in Connection 
            //var factory = new ConnectionFactory() {factory.uri = new Uri("Cloud Link")}

            var factory = new ConnectionFactory()//Connect RabbitMQ with Docker Container.
            {
                HostName = "localhost",
                Port = 5672,
                UserName = "guest",
                Password = "guest"
            };

            using var connection = factory.CreateConnection();

            var channel = connection.CreateModel();

            channel.ExchangeDeclare("logs-direct" , durable:true , type:ExchangeType.Direct);

            Enum.GetNames(typeof(LogNames)).ToList().ForEach(x =>
            {
                var routeKey = $"route-{x}";
                var queueName = $"direct-queue-{x}";
                channel.QueueDeclare(queueName, true, false, false);
                channel.QueueBind(queueName, "logs-direct",routeKey,null);
            });
            


            Enumerable.Range(1, 50).ToList().ForEach(x =>
            {
                LogNames log = (LogNames)new Random().Next(1, 5);
                string message = $"Log-type: {log}";
                var messagebody = Encoding.UTF8.GetBytes(message);

                var routeKey = $"route-{log}";

                channel.BasicPublish("logs-direct",routeKey, null, messagebody);

                Console.WriteLine($"log Gönderilmiþtir  : {message}");
            });

          
            Console.ReadLine();
        }
    }
}
-------publisher--------

-subscriber---------------------------------
using RabbitMQ.Client;
using RabbitMQ.Client.Events;

using System.Text;

namespace RabbitMQ.Subscriber
{
    class Program
    {
        static void Main(string[] args)
        {
            //if we have a cloud rabbitmq we must use this method in Connection 
            //var factory = new ConnectionFactory() {factory.uri = new Uri("Cloud Link")}

            var factory = new ConnectionFactory()//Connect RabbitMQ with Docker Container.
            {
                HostName = "localhost",
                Port = 5672,
                UserName = "guest",
                Password = "guest"
            };

            using var connection = factory.CreateConnection();

            var channel = connection.CreateModel();

            channel.BasicQos(0,1,false);//=> this "false" , answer to whether or not the specified number of messages should be sent to subscribers by dividing them. 

           /* channel.QueueDeclare("hello-queue", true, false, false);*///if u have same queue in publisher this method unncessary but harmless , and u must use same options for queue.

            var consumer = new EventingBasicConsumer(channel);
            var queueName = "direct-queue-Critical";
            channel.BasicConsume(queueName,false, consumer);

            Console.WriteLine("listening...");

            consumer.Received += (object? sender, BasicDeliverEventArgs e) =>
            {
                var message = Encoding.UTF8.GetString(e.Body.ToArray());

                Thread.Sleep(1500);
                Console.WriteLine("Uyarý:  " + message);
                //File.AppendAllText("log-critical.txt", message + "\n");
                channel.BasicAck(e.DeliveryTag, false);
            };




            Console.ReadLine();
        }

      
    }
}
-subscriber---------------------------------